# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: kotlin-api
  title: Kotlin API
  description: Create a Ktor Service Backend.
  tags: [kotlin, ktor]
spec:
  owner: user:zymus
  type: service
  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Build Settings
      required: [kotlinVersion, gradleVersion]
      properties:
        kotlinVersion:
          title: Kotlin Version
          type: string
          description: Version of Kotlin to use
          oneOf:
            - const: 1.9.0
              title: 1.9.0
            - const: 1.8.20
              title: 1.8.20
        gradleVersion:
          title: Gradle Version
          type: string
          description: Version of Gradle to use
          oneOf:
            - const: 8.2.1
              title: 8.2.1
            - const: 8.1.1
              title: 8.1.1
    - title: API Library Component
      required: [ktorVersion]
      properties:
        ktorVersion:
          title: Ktor version
          type: string
          description: Version of Ktor to use
          oneOf:
            - const: 2.3.2
              title: 2.3.2
    - title: Backend Service Component
      required: [ktorVersion]
      properties:
        ktorVersion:
          title: Ktor version
          type: string
          description: Version of Ktor to use
          oneOf:
            - const: 2.3.2
              title: 2.3.2
    - title: Where should that be created?
      required: [repoUrl]
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts: [github.com]

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          name: ${{ parameters.name }}
          owner: ${{ parameters.ownerKind }}:${{ parameters.owner }}
          gradleVersion: ${{ parameters.gradleVersion }}
          kotlinVersion: ${{ parameters.kotlinVersion }}
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
